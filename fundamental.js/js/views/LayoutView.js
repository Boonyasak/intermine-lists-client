// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  App.Views.LayoutView = (function(_super) {

    __extends(LayoutView, _super);

    function LayoutView() {
      return LayoutView.__super__.constructor.apply(this, arguments);
    }

    LayoutView.prototype.el = "body";

    LayoutView.prototype.initialize = function(options) {
      new App.Views.NotificationsView().render();
      new App.Views.SidebarListSearchView;
      new App.Views.SidebarFolderCollectionView;
      new App.Views.BreadcrumbView;
      return new ViewTooltip;
    };

    return LayoutView;

  })(Backbone.View);

  App.Views.NotificationsView = (function(_super) {

    __extends(NotificationsView, _super);

    function NotificationsView() {
      this.notify = __bind(this.notify, this);
      return NotificationsView.__super__.constructor.apply(this, arguments);
    }

    NotificationsView.prototype.el = "ul#notifications";

    NotificationsView.prototype.initialize = function(options) {
      App.Mediator.bind((options != null ? options.bind : void 0) || "notification", this.notify);
      return this;
    };

    NotificationsView.prototype.notify = function(text, title, type, sticky) {
      if (type == null) {
        type = "notify";
      }
      if (sticky == null) {
        sticky = false;
      }
      return $(this.el).append(new App.Views.NotificationView(text, title, type, sticky).render().el);
    };

    NotificationsView.prototype.render = function() {
      $(this.el).attr("data-view", "NotificationsView");
      return this;
    };

    return NotificationsView;

  })(Backbone.View);

  App.Views.NotificationView = (function(_super) {

    __extends(NotificationView, _super);

    function NotificationView() {
      this.close = __bind(this.close, this);
      return NotificationView.__super__.constructor.apply(this, arguments);
    }

    NotificationView.prototype.tagName = "li";

    NotificationView.prototype.template = function(model) {
      return NotificationView.__super__.template.call(this, model, "js/templates/_layout_notification.html");
    };

    NotificationView.prototype.events = {
      "click a": "close"
    };

    NotificationView.prototype.initialize = function(text, title, type, sticky) {
      this.text = text;
      this.title = title;
      this.type = type;
      this.sticky = sticky;
      return this;
    };

    NotificationView.prototype.render = function() {
      $(this.el).hide().html(this.template({
        'text': this.text,
        'title': this.title
      })).addClass(this.type).slideDown().attr("data-view", "NotificationView");
      if (!this.sticky) {
        setTimeout(this.close, 3000);
      }
      return this;
    };

    NotificationView.prototype.close = function() {
      return $(this.el).slideUp("fast");
    };

    return NotificationView;

  })(Backbone.View);

  window.ViewTooltip = (function() {

    ViewTooltip.prototype.active = false;

    ViewTooltip.prototype.path = "";

    function ViewTooltip() {
      this.showTooltip = __bind(this.showTooltip, this);

      this.deactivate = __bind(this.deactivate, this);

      this.activate = __bind(this.activate, this);

      var tooltip;
      tooltip = this;
      $('*[data-view]').live("mouseover mouseout", function(event) {
        if (event.type === "mouseover") {
          return tooltip.activate(this);
        } else {
          return tooltip.deactivate(this);
        }
      });
    }

    ViewTooltip.prototype.activate = function(element) {
      var parent, path, _i, _len, _ref;
      path = $(element).attr('data-view');
      path = "<strong>" + path + "</strong>";
      _ref = $(element).parents('*[data-view]');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        parent = _ref[_i];
        path += " &lang; " + $(parent).attr('data-view');
      }
      if (!(path.length < this.path.length)) {
        this.path = path;
      }
      if (!this.active) {
        return setTimeout(this.showTooltip, 0) && !this.active;
      }
    };

    ViewTooltip.prototype.deactivate = function() {
      $('div#data-view-label').remove();
      this.active = false;
      return this.path = "";
    };

    ViewTooltip.prototype.showTooltip = function() {
      if (this.path.length !== 0) {
        $('<div/>', {
          'id': 'data-view-label',
          'class': 'alert alert-info',
          'html': this.path
        }).appendTo('body');
      }
      this.active = false;
      return this.path = "";
    };

    return ViewTooltip;

  })();

}).call(this);
